// routes/register.js
import { query } from '../lib/db.js';
import fetch from 'node-fetch';
import bcrypt from 'bcrypt'; // ✅ added

export async function registerHandler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ message: 'Only POST requests allowed' });

  let body = req.body;
  if (!body || Object.keys(body).length === 0) {
    const chunks = [];
    for await (const chunk of req) chunks.push(chunk);
    try {
      body = JSON.parse(Buffer.concat(chunks).toString());
    } catch {
      return res.status(400).json({ message: 'Invalid JSON format' });
    }
  }

  const { fullName, email, address, phone, position, password, profileImage } = body;
  if (!fullName || !email || !password || !profileImage) {
    return res.status(400).json({ message: 'Missing required fields' });
  }

  // Check for existing email or phone
  const duplicateCheck = await query(
    `SELECT email, phone FROM users WHERE email = $1 OR phone = $2`,
    [email, phone]
  );
  
  if (duplicateCheck.rows.length > 0) {
    const taken = duplicateCheck.rows[0];
    const emailTaken = taken.email === email;
    const phoneTaken = taken.phone === phone;
  
    let message = 'Registration failed: ';
    if (emailTaken && phoneTaken) message += 'Email and phone number are already taken';
    else if (emailTaken) message += 'Email is already taken';
    else message += 'Phone number is already taken';
  
    return res.status(409).json({ message });
  }

  const base64Data = profileImage.split(',')[1];
  const imageBuffer = Buffer.from(base64Data, 'base64');
  const otp = Math.floor(100000 + Math.random() * 900000).toString();

  const hashedPassword = await bcrypt.hash(password, 10); // ✅ hash password

  console.log(`Generated OTP for ${phone}: ${otp}`);

  /*const smsRes = await fetch(
    `https://sms.iprogtech.com/api/v1/sms_messages?api_token=${process.env.SMS_API_TOKEN}&sms_provider=1`,
    {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        phone_number: phone,
        message: `This message was auto-generated by FSTLP App.\n\nHere is your OTP Verification: ${otp}.\n\nIf you didn't make this request, contact an administrator.`
      })
    }
  );

  if (!smsRes.ok) {
    console.error('SMS send failed:', await smsRes.text());
    return res.status(500).json({ message: 'Failed to send OTP' });
  }*/

  const insertResult = await query(
    `
      INSERT INTO users
        (fullName, email, address, phone, position, password, profileImage, otp, otp_verified, role)
      VALUES
        ($1, $2, $3, $4, $5, $6, $7, $8, false, 'visitor')
      RETURNING id
    `,
    [fullName, email, address, phone, position, hashedPassword, imageBuffer, otp]
  );

  return res.status(200).json({
    message: 'User registered — OTP sent',
    id: insertResult.rows[0].id,
    otp // optionally hide in production
  });
}
